'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3615
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
 Serializable(), _
 System.ComponentModel.DesignerCategoryAttribute("code"), _
 System.ComponentModel.ToolboxItem(True), _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), _
 System.Xml.Serialization.XmlRootAttribute("DVDCollectionDataSet"), _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
Partial Public Class DVDCollectionDataSet
    Inherits System.Data.DataSet

    Private tableDVDs As DVDsDataTable

    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub New()
        MyBase.New()
        Me.BeginInit()
        Me.InitClass()
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit()
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, False)
        If (Me.IsBinarySerialized(info, context) = True) Then
            Me.InitVars(False)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DVDs")) Is Nothing) Then
                MyBase.Tables.Add(New DVDsDataTable(ds.Tables("DVDs")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property DVDs() As DVDsDataTable
        Get
            Return Me.tableDVDs
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.BrowsableAttribute(True), _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)> _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set(ByVal value As System.Data.SchemaSerializationMode)
            Me._schemaSerializationMode = value
        End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit()
        Me.InitClass()
        Me.EndInit()
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As DVDCollectionDataSet = CType(MyBase.Clone, DVDCollectionDataSet)
        cln.InitVars()
        Return cln
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset()
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("DVDs")) Is Nothing) Then
                MyBase.Tables.Add(New DVDsDataTable(ds.Tables("DVDs")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXml(reader)
            Me.InitVars()
        End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Overloads Sub InitVars()
        Me.InitVars(True)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDVDs = CType(MyBase.Tables("DVDs"), DVDsDataTable)
        If (initTable = True) Then
            If (Not (Me.tableDVDs) Is Nothing) Then
                Me.tableDVDs.InitVars()
            End If
        End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub InitClass()
        Me.DataSetName = "DVDCollectionDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DVDCollectionDatabaseDataSet.xsd"
        Me.EnforceConstraints = True
        Me.tableDVDs = New DVDsDataTable
        MyBase.Tables.Add(Me.tableDVDs)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeDVDs() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars()
        End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DVDCollectionDataSet = New DVDCollectionDataSet
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function

    Public Delegate Sub DVDsRowChangeEventHandler(ByVal sender As Object, ByVal e As DVDsRowChangeEvent)

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class DVDsDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnID As System.Data.DataColumn

        Private columnTitle As System.Data.DataColumn

        Private columnDescription As System.Data.DataColumn

        Private columnActors As System.Data.DataColumn

        Private columnDirector As System.Data.DataColumn

        Private columnGenre As System.Data.DataColumn

        Private columnLength As System.Data.DataColumn

        Private columnRated As System.Data.DataColumn

        Private columnYearReleased As System.Data.DataColumn

        Private columnUPC As System.Data.DataColumn

        Private columnImageLink As System.Data.DataColumn

        Private columnImageBinary As System.Data.DataColumn

        Private columnWebPageLink As System.Data.DataColumn

        Private columnMyRating As System.Data.DataColumn

        Private columnComments As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "DVDs"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property IDColumn() As System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TitleColumn() As System.Data.DataColumn
            Get
                Return Me.columnTitle
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DescriptionColumn() As System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ActorsColumn() As System.Data.DataColumn
            Get
                Return Me.columnActors
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DirectorColumn() As System.Data.DataColumn
            Get
                Return Me.columnDirector
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property GenreColumn() As System.Data.DataColumn
            Get
                Return Me.columnGenre
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property LengthColumn() As System.Data.DataColumn
            Get
                Return Me.columnLength
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property RatedColumn() As System.Data.DataColumn
            Get
                Return Me.columnRated
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property YearReleasedColumn() As System.Data.DataColumn
            Get
                Return Me.columnYearReleased
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property UPCColumn() As System.Data.DataColumn
            Get
                Return Me.columnUPC
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ImageLinkColumn() As System.Data.DataColumn
            Get
                Return Me.columnImageLink
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ImageBinaryColumn() As System.Data.DataColumn
            Get
                Return Me.columnImageBinary
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property WebPageLinkColumn() As System.Data.DataColumn
            Get
                Return Me.columnWebPageLink
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property MyRatingColumn() As System.Data.DataColumn
            Get
                Return Me.columnMyRating
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CommentsColumn() As System.Data.DataColumn
            Get
                Return Me.columnComments
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As DVDsRow
            Get
                Return CType(Me.Rows(index), DVDsRow)
            End Get
        End Property

        Public Event DVDsRowChanging As DVDsRowChangeEventHandler

        Public Event DVDsRowChanged As DVDsRowChangeEventHandler

        Public Event DVDsRowDeleting As DVDsRowChangeEventHandler

        Public Event DVDsRowDeleted As DVDsRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddDVDsRow(ByVal row As DVDsRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddDVDsRow(ByVal ID As String, ByVal Title As String, ByVal Description As String, ByVal Actors As String, ByVal Director As String, ByVal Genre As String, ByVal Length As Integer, ByVal Rated As String, ByVal YearReleased As String, ByVal UPC As String, ByVal ImageLink As String, ByVal ImageBinary() As Byte, ByVal WebPageLink As String, ByVal MyRating As Integer, ByVal Comments As String) As DVDsRow
            Dim rowDVDsRow As DVDsRow = CType(Me.NewRow, DVDsRow)
            rowDVDsRow.ItemArray = New Object() {ID, Title, Description, Actors, Director, Genre, Length, Rated, YearReleased, UPC, ImageLink, ImageBinary, WebPageLink, MyRating, Comments}
            Me.Rows.Add(rowDVDsRow)
            Return rowDVDsRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function FindByID(ByVal ID As String) As DVDsRow
            Return CType(Me.Rows.Find(New Object() {ID}), DVDsRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As DVDsDataTable = CType(MyBase.Clone, DVDsDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New DVDsDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnTitle = MyBase.Columns("Title")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnActors = MyBase.Columns("Actors")
            Me.columnDirector = MyBase.Columns("Director")
            Me.columnGenre = MyBase.Columns("Genre")
            Me.columnLength = MyBase.Columns("Length")
            Me.columnRated = MyBase.Columns("Rated")
            Me.columnYearReleased = MyBase.Columns("YearReleased")
            Me.columnUPC = MyBase.Columns("UPC")
            Me.columnImageLink = MyBase.Columns("ImageLink")
            Me.columnImageBinary = MyBase.Columns("ImageBinary")
            Me.columnWebPageLink = MyBase.Columns("WebPageLink")
            Me.columnMyRating = MyBase.Columns("MyRating")
            Me.columnComments = MyBase.Columns("Comments")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnID = New System.Data.DataColumn("ID", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnTitle = New System.Data.DataColumn("Title", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTitle)
            Me.columnDescription = New System.Data.DataColumn("Description", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnActors = New System.Data.DataColumn("Actors", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActors)
            Me.columnDirector = New System.Data.DataColumn("Director", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDirector)
            Me.columnGenre = New System.Data.DataColumn("Genre", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGenre)
            Me.columnLength = New System.Data.DataColumn("Length", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLength)
            Me.columnRated = New System.Data.DataColumn("Rated", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRated)
            Me.columnYearReleased = New System.Data.DataColumn("YearReleased", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearReleased)
            Me.columnUPC = New System.Data.DataColumn("UPC", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPC)
            Me.columnImageLink = New System.Data.DataColumn("ImageLink", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImageLink)
            Me.columnImageBinary = New System.Data.DataColumn("ImageBinary", GetType(Byte()), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImageBinary)
            Me.columnWebPageLink = New System.Data.DataColumn("WebPageLink", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWebPageLink)
            Me.columnMyRating = New System.Data.DataColumn("MyRating", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMyRating)
            Me.columnComments = New System.Data.DataColumn("Comments", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComments)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnID}, True))
            Me.columnID.AllowDBNull = False
            Me.columnID.Unique = True
            Me.columnID.MaxLength = 50
            Me.columnTitle.MaxLength = 255
            Me.columnDescription.MaxLength = 2147483647
            Me.columnActors.MaxLength = 255
            Me.columnDirector.MaxLength = 255
            Me.columnGenre.MaxLength = 255
            Me.columnRated.MaxLength = 50
            Me.columnYearReleased.MaxLength = 50
            Me.columnUPC.MaxLength = 50
            Me.columnImageLink.MaxLength = 2147483647
            Me.columnWebPageLink.MaxLength = 2147483647
            Me.columnComments.MaxLength = 2147483647
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewDVDsRow() As DVDsRow
            Return CType(Me.NewRow, DVDsRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New DVDsRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DVDsRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DVDsRowChangedEvent) Is Nothing) Then
                RaiseEvent DVDsRowChanged(Me, New DVDsRowChangeEvent(CType(e.Row, DVDsRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DVDsRowChangingEvent) Is Nothing) Then
                RaiseEvent DVDsRowChanging(Me, New DVDsRowChangeEvent(CType(e.Row, DVDsRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DVDsRowDeletedEvent) Is Nothing) Then
                RaiseEvent DVDsRowDeleted(Me, New DVDsRowChangeEvent(CType(e.Row, DVDsRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DVDsRowDeletingEvent) Is Nothing) Then
                RaiseEvent DVDsRowDeleting(Me, New DVDsRowChangeEvent(CType(e.Row, DVDsRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveDVDsRow(ByVal row As DVDsRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DVDCollectionDataSet = New DVDCollectionDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DVDsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class DVDsRow
        Inherits System.Data.DataRow

        Private tableDVDs As DVDsDataTable

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDVDs = CType(Me.Table, DVDsDataTable)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ID() As String
            Get
                Return CType(Me(Me.tableDVDs.IDColumn), String)
            End Get
            Set(ByVal value As String)
                Me(Me.tableDVDs.IDColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Title() As String
            Get
                Try
                    Return CType(Me(Me.tableDVDs.TitleColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Title' in table 'DVDs' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableDVDs.TitleColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Description() As String
            Get
                Try
                    Return CType(Me(Me.tableDVDs.DescriptionColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Description' in table 'DVDs' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableDVDs.DescriptionColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Actors() As String
            Get
                Try
                    Return CType(Me(Me.tableDVDs.ActorsColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Actors' in table 'DVDs' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableDVDs.ActorsColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Director() As String
            Get
                Try
                    Return CType(Me(Me.tableDVDs.DirectorColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Director' in table 'DVDs' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableDVDs.DirectorColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Genre() As String
            Get
                Try
                    Return CType(Me(Me.tableDVDs.GenreColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Genre' in table 'DVDs' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableDVDs.GenreColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Length() As Integer
            Get
                Try
                    Return CType(Me(Me.tableDVDs.LengthColumn), Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Length' in table 'DVDs' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableDVDs.LengthColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Rated() As String
            Get
                Try
                    Return CType(Me(Me.tableDVDs.RatedColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Rated' in table 'DVDs' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableDVDs.RatedColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property YearReleased() As String
            Get
                Try
                    Return CType(Me(Me.tableDVDs.YearReleasedColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'YearReleased' in table 'DVDs' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableDVDs.YearReleasedColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property UPC() As String
            Get
                Try
                    Return CType(Me(Me.tableDVDs.UPCColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'UPC' in table 'DVDs' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableDVDs.UPCColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ImageLink() As String
            Get
                Try
                    Return CType(Me(Me.tableDVDs.ImageLinkColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ImageLink' in table 'DVDs' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableDVDs.ImageLinkColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ImageBinary() As Byte()
            Get
                Try
                    Return CType(Me(Me.tableDVDs.ImageBinaryColumn), Byte())
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ImageBinary' in table 'DVDs' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Byte())
                Me(Me.tableDVDs.ImageBinaryColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property WebPageLink() As String
            Get
                Try
                    Return CType(Me(Me.tableDVDs.WebPageLinkColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'WebPageLink' in table 'DVDs' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableDVDs.WebPageLinkColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property MyRating() As Integer
            Get
                Try
                    Return CType(Me(Me.tableDVDs.MyRatingColumn), Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'MyRating' in table 'DVDs' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableDVDs.MyRatingColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Comments() As String
            Get
                Try
                    Return CType(Me(Me.tableDVDs.CommentsColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Comments' in table 'DVDs' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableDVDs.CommentsColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsTitleNull() As Boolean
            Return Me.IsNull(Me.tableDVDs.TitleColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetTitleNull()
            Me(Me.tableDVDs.TitleColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableDVDs.DescriptionColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetDescriptionNull()
            Me(Me.tableDVDs.DescriptionColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsActorsNull() As Boolean
            Return Me.IsNull(Me.tableDVDs.ActorsColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetActorsNull()
            Me(Me.tableDVDs.ActorsColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsDirectorNull() As Boolean
            Return Me.IsNull(Me.tableDVDs.DirectorColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetDirectorNull()
            Me(Me.tableDVDs.DirectorColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsGenreNull() As Boolean
            Return Me.IsNull(Me.tableDVDs.GenreColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetGenreNull()
            Me(Me.tableDVDs.GenreColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsLengthNull() As Boolean
            Return Me.IsNull(Me.tableDVDs.LengthColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetLengthNull()
            Me(Me.tableDVDs.LengthColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsRatedNull() As Boolean
            Return Me.IsNull(Me.tableDVDs.RatedColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetRatedNull()
            Me(Me.tableDVDs.RatedColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsYearReleasedNull() As Boolean
            Return Me.IsNull(Me.tableDVDs.YearReleasedColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetYearReleasedNull()
            Me(Me.tableDVDs.YearReleasedColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsUPCNull() As Boolean
            Return Me.IsNull(Me.tableDVDs.UPCColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetUPCNull()
            Me(Me.tableDVDs.UPCColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsImageLinkNull() As Boolean
            Return Me.IsNull(Me.tableDVDs.ImageLinkColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetImageLinkNull()
            Me(Me.tableDVDs.ImageLinkColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsImageBinaryNull() As Boolean
            Return Me.IsNull(Me.tableDVDs.ImageBinaryColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetImageBinaryNull()
            Me(Me.tableDVDs.ImageBinaryColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsWebPageLinkNull() As Boolean
            Return Me.IsNull(Me.tableDVDs.WebPageLinkColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetWebPageLinkNull()
            Me(Me.tableDVDs.WebPageLinkColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsMyRatingNull() As Boolean
            Return Me.IsNull(Me.tableDVDs.MyRatingColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetMyRatingNull()
            Me(Me.tableDVDs.MyRatingColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsCommentsNull() As Boolean
            Return Me.IsNull(Me.tableDVDs.CommentsColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetCommentsNull()
            Me(Me.tableDVDs.CommentsColumn) = System.Convert.DBNull
        End Sub
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class DVDsRowChangeEvent
        Inherits System.EventArgs

        Private eventRow As DVDsRow

        Private eventAction As System.Data.DataRowAction

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As DVDsRow, ByVal action As System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As DVDsRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DVDCollectionDataSetTableAdapters

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class DVDsTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DVDs"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Title", "Title")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("Actors", "Actors")
            tableMapping.ColumnMappings.Add("Director", "Director")
            tableMapping.ColumnMappings.Add("Genre", "Genre")
            tableMapping.ColumnMappings.Add("Length", "Length")
            tableMapping.ColumnMappings.Add("Rated", "Rated")
            tableMapping.ColumnMappings.Add("YearReleased", "YearReleased")
            tableMapping.ColumnMappings.Add("UPC", "UPC")
            tableMapping.ColumnMappings.Add("ImageLink", "ImageLink")
            tableMapping.ColumnMappings.Add("ImageBinary", "ImageBinary")
            tableMapping.ColumnMappings.Add("WebPageLink", "WebPageLink")
            tableMapping.ColumnMappings.Add("MyRating", "MyRating")
            tableMapping.ColumnMappings.Add("Comments", "Comments")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DVDs] WHERE (([ID] = @Original_ID) AND ((@IsNull_Title = 1 AND" & _
                " [Title] IS NULL) OR ([Title] = @Original_Title)) AND ((@IsNull_Actors = 1 AND [" & _
                "Actors] IS NULL) OR ([Actors] = @Original_Actors)) AND ((@IsNull_Director = 1 AN" & _
                "D [Director] IS NULL) OR ([Director] = @Original_Director)) AND ((@IsNull_Genre " & _
                "= 1 AND [Genre] IS NULL) OR ([Genre] = @Original_Genre)) AND ((@IsNull_Length = " & _
                "1 AND [Length] IS NULL) OR ([Length] = @Original_Length)) AND ((@IsNull_Rated = " & _
                "1 AND [Rated] IS NULL) OR ([Rated] = @Original_Rated)) AND ((@IsNull_YearRelease" & _
                "d = 1 AND [YearReleased] IS NULL) OR ([YearReleased] = @Original_YearReleased)) " & _
                "AND ((@IsNull_UPC = 1 AND [UPC] IS NULL) OR ([UPC] = @Original_UPC)) AND ((@IsNu" & _
                "ll_ImageLink = 1 AND [ImageLink] IS NULL) OR ([ImageLink] = @Original_ImageLink)" & _
                ") AND ((@IsNull_WebPageLink = 1 AND [WebPageLink] IS NULL) OR ([WebPageLink] = @" & _
                "Original_WebPageLink)) AND ((@IsNull_MyRating = 1 AND [MyRating] IS NULL) OR ([M" & _
                "yRating] = @Original_MyRating)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Title", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Title", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Actors", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Actors", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Actors", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Actors", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Director", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Director", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Director", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Director", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Genre", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Genre", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Genre", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Genre", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Length", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Length", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Length", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Length", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Rated", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Rated", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Rated", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Rated", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_YearReleased", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "YearReleased", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_YearReleased", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "YearReleased", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_UPC", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UPC", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_UPC", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UPC", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_ImageLink", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ImageLink", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ImageLink", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ImageLink", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_WebPageLink", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "WebPageLink", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_WebPageLink", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "WebPageLink", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_MyRating", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MyRating", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_MyRating", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MyRating", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DVDs] ([ID], [Title], [Description], [Actors], [Director], [Ge" & _
                "nre], [Length], [Rated], [YearReleased], [UPC], [ImageLink], [ImageBinary], [Web" & _
                "PageLink], [MyRating], [Comments]) VALUES (@ID, @Title, @Description, @Actors, @" & _
                "Director, @Genre, @Length, @Rated, @YearReleased, @UPC, @ImageLink, @ImageBinary" & _
                ", @WebPageLink, @MyRating, @Comments);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ID, Title, Description, Actors, D" & _
                "irector, Genre, Length, Rated, YearReleased, UPC, ImageLink, ImageBinary, WebPag" & _
                "eLink, MyRating, Comments FROM DVDs WHERE (ID = @ID)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Title", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Actors", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Actors", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Director", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Director", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Genre", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Genre", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Length", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Length", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Rated", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Rated", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@YearReleased", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "YearReleased", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@UPC", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UPC", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ImageLink", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ImageLink", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ImageBinary", System.Data.SqlDbType.VarBinary, 0, System.Data.ParameterDirection.Input, 0, 0, "ImageBinary", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@WebPageLink", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "WebPageLink", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@MyRating", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MyRating", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Comments", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Comments", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[DVDs] SET [ID] = @ID, [Title] = @Title, [Description] = @Descriptio" & _
                "n, [Actors] = @Actors, [Director] = @Director, [Genre] = @Genre, [Length] = @Len" & _
                "gth, [Rated] = @Rated, [YearReleased] = @YearReleased, [UPC] = @UPC, [ImageLink]" & _
                " = @ImageLink, [ImageBinary] = @ImageBinary, [WebPageLink] = @WebPageLink, [MyRa" & _
                "ting] = @MyRating, [Comments] = @Comments WHERE (([ID] = @Original_ID) AND ((@Is" & _
                "Null_Title = 1 AND [Title] IS NULL) OR ([Title] = @Original_Title)) AND ((@IsNul" & _
                "l_Actors = 1 AND [Actors] IS NULL) OR ([Actors] = @Original_Actors)) AND ((@IsNu" & _
                "ll_Director = 1 AND [Director] IS NULL) OR ([Director] = @Original_Director)) AN" & _
                "D ((@IsNull_Genre = 1 AND [Genre] IS NULL) OR ([Genre] = @Original_Genre)) AND (" & _
                "(@IsNull_Length = 1 AND [Length] IS NULL) OR ([Length] = @Original_Length)) AND " & _
                "((@IsNull_Rated = 1 AND [Rated] IS NULL) OR ([Rated] = @Original_Rated)) AND ((@" & _
                "IsNull_YearReleased = 1 AND [YearReleased] IS NULL) OR ([YearReleased] = @Origin" & _
                "al_YearReleased)) AND ((@IsNull_UPC = 1 AND [UPC] IS NULL) OR ([UPC] = @Original" & _
                "_UPC)) AND ((@IsNull_ImageLink = 1 AND [ImageLink] IS NULL) OR ([ImageLink] = @O" & _
                "riginal_ImageLink)) AND ((@IsNull_WebPageLink = 1 AND [WebPageLink] IS NULL) OR " & _
                "([WebPageLink] = @Original_WebPageLink)) AND ((@IsNull_MyRating = 1 AND [MyRatin" & _
                "g] IS NULL) OR ([MyRating] = @Original_MyRating)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ID, Title, Descripti" & _
                "on, Actors, Director, Genre, Length, Rated, YearReleased, UPC, ImageLink, ImageB" & _
                "inary, WebPageLink, MyRating, Comments FROM DVDs WHERE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Title", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Actors", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Actors", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Director", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Director", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Genre", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Genre", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Length", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Length", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Rated", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Rated", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@YearReleased", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "YearReleased", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@UPC", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UPC", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ImageLink", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ImageLink", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ImageBinary", System.Data.SqlDbType.VarBinary, 0, System.Data.ParameterDirection.Input, 0, 0, "ImageBinary", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@WebPageLink", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "WebPageLink", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@MyRating", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MyRating", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Comments", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Comments", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Title", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Title", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Actors", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Actors", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Actors", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Actors", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Director", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Director", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Director", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Director", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Genre", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Genre", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Genre", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Genre", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Length", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Length", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Length", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Length", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Rated", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Rated", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Rated", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Rated", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_YearReleased", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "YearReleased", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_YearReleased", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "YearReleased", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_UPC", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UPC", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_UPC", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UPC", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_ImageLink", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ImageLink", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ImageLink", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ImageLink", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_WebPageLink", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "WebPageLink", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_WebPageLink", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "WebPageLink", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_MyRating", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MyRating", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_MyRating", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MyRating", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.MyMovieCollection1.My.MySettings.Default.Connection
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, Title, Description, Actors, Director, Genre, Length, Rated, YearReleas" & _
                "ed, UPC, ImageLink, ImageBinary, WebPageLink, MyRating, Comments FROM dbo.DVDs"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As DVDCollectionDataSet.DVDsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As DVDCollectionDataSet.DVDsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DVDCollectionDataSet.DVDsDataTable = New DVDCollectionDataSet.DVDsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As DVDCollectionDataSet.DVDsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As DVDCollectionDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "DVDs")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_ID As String, ByVal Original_Title As String, ByVal Original_Actors As String, ByVal Original_Director As String, ByVal Original_Genre As String, ByVal Original_Length As Integer, ByVal Original_Rated As String, ByVal Original_YearReleased As String, ByVal Original_UPC As String, ByVal Original_ImageLink As String, ByVal Original_WebPageLink As String, ByVal Original_MyRating As Integer) As Integer
            If (Original_ID Is Nothing) Then
                Throw New System.ArgumentNullException("Original_ID")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID, String)
            End If
            If (Original_Title Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Title")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Title, String)
            End If
            If (Original_Actors Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Actors")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Actors, String)
            End If
            If (Original_Director Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Director")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Director, String)
            End If
            If (Original_Genre Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Genre")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Genre, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0, Object)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Length, Integer)
            If (Original_Rated Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Rated")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Rated, String)
            End If
            If (Original_YearReleased Is Nothing) Then
                Throw New System.ArgumentNullException("Original_YearReleased")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_YearReleased, String)
            End If
            If (Original_UPC Is Nothing) Then
                Throw New System.ArgumentNullException("Original_UPC")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_UPC, String)
            End If
            If (Original_ImageLink Is Nothing) Then
                Throw New System.ArgumentNullException("Original_ImageLink")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_ImageLink, String)
            End If
            If (Original_WebPageLink Is Nothing) Then
                Throw New System.ArgumentNullException("Original_WebPageLink")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_WebPageLink, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0, Object)
            Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_MyRating, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal ID As String, ByVal Title As String, ByVal Description As String, ByVal Actors As String, ByVal Director As String, ByVal Genre As String, ByVal Length As Integer, ByVal Rated As String, ByVal YearReleased As String, ByVal UPC As String, ByVal ImageLink As String, ByVal ImageBinary() As Byte, ByVal WebPageLink As String, ByVal MyRating As Integer, ByVal Comments As String) As Integer
            If (ID Is Nothing) Then
                Throw New System.ArgumentNullException("ID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID, String)
            End If
            If (Title Is Nothing) Then
                Throw New System.ArgumentNullException("Title")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Title, String)
            End If
            If (Description Is Nothing) Then
                Throw New System.ArgumentNullException("Description")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Description, String)
            End If
            If (Actors Is Nothing) Then
                Throw New System.ArgumentNullException("Actors")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Actors, String)
            End If
            If (Director Is Nothing) Then
                Throw New System.ArgumentNullException("Director")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Director, String)
            End If
            If (Genre Is Nothing) Then
                Throw New System.ArgumentNullException("Genre")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Genre, String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(Length, Integer)
            If (Rated Is Nothing) Then
                Throw New System.ArgumentNullException("Rated")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Rated, String)
            End If
            If (YearReleased Is Nothing) Then
                Throw New System.ArgumentNullException("YearReleased")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(YearReleased, String)
            End If
            If (UPC Is Nothing) Then
                Throw New System.ArgumentNullException("UPC")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(UPC, String)
            End If
            If (ImageLink Is Nothing) Then
                Throw New System.ArgumentNullException("ImageLink")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(ImageLink, String)
            End If
            If (ImageBinary Is Nothing) Then
                Throw New System.ArgumentNullException("ImageBinary")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(ImageBinary, Byte())
            End If
            If (WebPageLink Is Nothing) Then
                Throw New System.ArgumentNullException("WebPageLink")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(WebPageLink, String)
            End If
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(MyRating, Integer)
            If (Comments Is Nothing) Then
                Throw New System.ArgumentNullException("Comments")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Comments, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal ID As String, _
                    ByVal Title As String, _
                    ByVal Description As String, _
                    ByVal Actors As String, _
                    ByVal Director As String, _
                    ByVal Genre As String, _
                    ByVal Length As Integer, _
                    ByVal Rated As String, _
                    ByVal YearReleased As String, _
                    ByVal UPC As String, _
                    ByVal ImageLink As String, _
                    ByVal ImageBinary() As Byte, _
                    ByVal WebPageLink As String, _
                    ByVal MyRating As Integer, _
                    ByVal Comments As String, _
                    ByVal Original_ID As String, _
                    ByVal Original_Title As String, _
                    ByVal Original_Actors As String, _
                    ByVal Original_Director As String, _
                    ByVal Original_Genre As String, _
                    ByVal Original_Length As Integer, _
                    ByVal Original_Rated As String, _
                    ByVal Original_YearReleased As String, _
                    ByVal Original_UPC As String, _
                    ByVal Original_ImageLink As String, _
                    ByVal Original_WebPageLink As String, _
                    ByVal Original_MyRating As Integer) As Integer
            If (ID Is Nothing) Then
                Throw New System.ArgumentNullException("ID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID, String)
            End If
            If (Title Is Nothing) Then
                Throw New System.ArgumentNullException("Title")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Title, String)
            End If
            If (Description Is Nothing) Then
                Throw New System.ArgumentNullException("Description")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Description, String)
            End If
            If (Actors Is Nothing) Then
                Throw New System.ArgumentNullException("Actors")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Actors, String)
            End If
            If (Director Is Nothing) Then
                Throw New System.ArgumentNullException("Director")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Director, String)
            End If
            If (Genre Is Nothing) Then
                Throw New System.ArgumentNullException("Genre")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Genre, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Length, Integer)
            If (Rated Is Nothing) Then
                Throw New System.ArgumentNullException("Rated")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Rated, String)
            End If
            If (YearReleased Is Nothing) Then
                Throw New System.ArgumentNullException("YearReleased")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(YearReleased, String)
            End If
            If (UPC Is Nothing) Then
                Throw New System.ArgumentNullException("UPC")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(UPC, String)
            End If
            If (ImageLink Is Nothing) Then
                Throw New System.ArgumentNullException("ImageLink")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(ImageLink, String)
            End If
            If (ImageBinary Is Nothing) Then
                Throw New System.ArgumentNullException("ImageBinary")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ImageBinary, Byte())
            End If
            If (WebPageLink Is Nothing) Then
                Throw New System.ArgumentNullException("WebPageLink")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(WebPageLink, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(MyRating, Integer)
            If (Comments Is Nothing) Then
                Throw New System.ArgumentNullException("Comments")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Comments, String)
            End If
            If (Original_ID Is Nothing) Then
                Throw New System.ArgumentNullException("Original_ID")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_ID, String)
            End If
            If (Original_Title Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Title")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_Title, String)
            End If
            If (Original_Actors Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Actors")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_Actors, String)
            End If
            If (Original_Director Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Director")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_Director, String)
            End If
            If (Original_Genre Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Genre")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_Genre, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0, Object)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_Length, Integer)
            If (Original_Rated Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Rated")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_Rated, String)
            End If
            If (Original_YearReleased Is Nothing) Then
                Throw New System.ArgumentNullException("Original_YearReleased")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_YearReleased, String)
            End If
            If (Original_UPC Is Nothing) Then
                Throw New System.ArgumentNullException("Original_UPC")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_UPC, String)
            End If
            If (Original_ImageLink Is Nothing) Then
                Throw New System.ArgumentNullException("Original_ImageLink")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_ImageLink, String)
            End If
            If (Original_WebPageLink Is Nothing) Then
                Throw New System.ArgumentNullException("Original_WebPageLink")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_WebPageLink, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0, Object)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_MyRating, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
End Namespace
